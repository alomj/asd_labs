import random
import math
import turtle
import keyboard

random.seed(3308)

def create_matrix_C(n, matrix_B, undir_matrix):
    return [[math.ceil(matrix_B[i][j] * 100) if undir_matrix[i][j] == 1 else 0 for j in range(n)] for i in range(n)]

def create_matrix_D(n, matrix_C):
    return [[1 if matrix_C[i][j] != 0 else 0 for j in range(n)] for i in range(n)]

def create_matrix_H(n, matrix_D):
    return [[1 if matrix_D[i][j] != matrix_D[j][i] else 0 for j in range(n)] for i in range(n)]

def create_matrix_Tr(n):
    return [[1 if j >= i else 0 for j in range(n)] for i in range(n)]

def create_matrix_W(n, matrix_D, matrix_H, matrix_Tr, matrix_C):
    matrix_W = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(i, n):
            matrix_W[i][j] = (matrix_D[i][j] + matrix_H[i][j] * matrix_Tr[i][j]) * matrix_C[i][j]
            matrix_W[j][i] = matrix_W[i][j]
    return matrix_W

def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)  # Fix the typo here
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1

def kruskal(matrix):
    n = len(matrix)
    result = []
    parent = [i for i in range(n)]
    rank = [0] * n
    edges = []
    for i in range(n):
        for j in range(i + 1, n):
            if matrix[i][j] != 0:
                edges.append((i, j, matrix[i][j]))
    edges.sort(key=lambda x: x[2])
    i = 0
    e = 0
    while e < n - 1:
        u, v, w = edges[i]
        i += 1
        x = find(parent, u)
        y = find(parent, v)
        if x != y:
            e += 1
            result.append((u, v, w))
            union(parent, rank, x, y)
    return result

def drawKraskal(mst):
    def draw_edge(edge):
        start = vertices[edge[0] + 1]
        end = vertices[edge[1] + 1]
        t.penup()
        t.goto(start['x'], start['y'])
        t.pendown()
        t.color('red')
        t.width(2)
        t.goto(end['x'], end['y'])

        draw_circle(start['x'], start['y'])
        draw_circle(end['x'], end['y'])
        write_text_in_circle(start['x'], start['y'], str(edge[0] + 1))
        write_text_in_circle(end['x'], end['y'], str(edge[1] + 1))

    
        mid_x = (start['x'] + end['x']) / 2
        mid_y = (start['y'] + end['y']) / 2
        t.penup()
        t.goto(mid_x, mid_y)
        t.pendown()
        t.color('blue')
        t.write(str(edge[2]), align="center", font=("Arial", 12, "normal"))

    def draw_next_edge():
        if draw_next_edge.index < len(mst):
            draw_edge(mst[draw_next_edge.index])
            draw_next_edge.index += 1

    def on_space(event):
        draw_next_edge()

    draw_next_edge.index = 0

    keyboard.on_press_key('space', on_space)

def getAdir(seed, variant):
    random.seed(seed)
    n = 10 + variant[3]
    matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(random.uniform(0, 2.0))
        matrix.append(row)
    k = 1.0 - variant[3] * 0.01 - variant[4] * 0.005 - 0.05
    for i in range(n):
        for j in range(n):
            matrix[i][j] *= k
    rounded_matrix = [[0 if element < 1.0 else 1 for element in row] for row in matrix]
    return rounded_matrix

def toUndir(matrix, N):
    undir = []
    for i in range(N):
        undir.append([])
        for j in range(N):
            undir[i].append(0)
    for i in range(N):
        for j in range(N):
            undir[i][j] = matrix[i][j] or matrix[j][i]
    return undir

def draw_circle(x, y):
    t.pencolor('#f0f0f0')
    t.penup()
    t.goto(x, y - radius)
    t.pendown()
    t.fillcolor('#f0f0f0')
    t.begin_fill()
    t.circle(radius)
    t.end_fill()

def write_text_in_circle(x, y, text):
    t.penup()
    t.goto(x, y - radius / 2)
    t.pendown()
    t.color('black')
    t.write(text, align="center", font=("Arial", 12, "normal"))

def draw_line(start_x, start_y, end_x, end_y, is_arrow=False):
    t.penup()
    t.goto(start_x, start_y)
    t.pendown()
    if is_arrow:
        arrow_length = 20
        t.setheading(t.towards(end_x, end_y))
        t.forward(t.distance(end_x, end_y) - arrow_length)
        t.stamp()
    t.goto(end_x, end_y)
    if is_arrow:
        t.setheading(0)

def draw_self_arrow(start_x, start_y, end_x, end_y, is_arrow=False):
    draw_line(start_x, start_y, start_x + self_arrow_padding, start_y + self_arrow_padding / 2)
    draw_line(start_x + self_arrow_padding, start_y + self_arrow_padding / 2, start_x + self_arrow_padding, start_y - self_arrow_padding / 2)
    draw_line(start_x + self_arrow_padding, start_y - self_arrow_padding / 2, end_x, end_y, is_arrow)

def draw_broken_arrow(start_x, start_y, end_x, end_y, angle, is_arrow=False):
    distance_between_points = math.sqrt((end_x - start_x) ** 2 + (end_y - start_y) ** 2)
    change = (distance_between_points / (window_height / 4)) * radius
    if angle == 90:
        middle_x = start_x + change
        middle_y = (start_y + end_y) / 2
    elif angle == -90:
        middle_x = start_x - change
        middle_y = (start_y + end_y) / 2
    elif angle == 0:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y - change
    elif angle == 180:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y + change
    draw_line(start_x, start_y, middle_x, middle_y)
    draw_line(middle_x, middle_y, end_x, end_y, is_arrow)

def angle_between_points(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1
    angle_radians = math.atan2(dy, dx)
    angle_degrees = math.degrees(angle_radians)
    return angle_degrees

n = {
    1: 3,
    2: 3,
    3: 0,
    4: 8,
}

window_width = 600
window_height = 600
margin = 100
self_arrow_padding = 60
radius = 20
vertices = {
    1: {'x': margin, 'y': window_height - margin},
    2: {'x': (window_width - 2 * margin) / 3 + margin, 'y': window_height - margin},
    3: {'x': (window_width - 2 * margin) / 3 * 2 + margin, 'y': window_height - margin},
    4: {'x': window_width - margin, 'y': window_height - margin},
    5: {'x': window_width - margin, 'y': (window_height - 2 * margin) / 2 + margin},
    6: {'x': window_width - margin, 'y': margin},
    7: {'x': (window_width - 2 * margin) / 3 * 2 + margin, 'y': margin},
    8: {'x': margin, 'y': margin},
    9: {'x': margin, 'y': (window_height - 2 * margin) / 2 + margin},
    10: {'x': window_width / 2, 'y': window_height / 2},
}

Adir = getAdir(3308, n)
Undir = toUndir(Adir, 10 + n[3])

has_arrow = False

while True:
    print('Введіть: 1 щоб вивести напрямлений чи 0 щоб вивести ненапрямлений')
    choice = input()
    if choice == '1':
        matrix = Adir
        has_arrow = True
        break
    elif choice == '0':
        matrix = Undir
        has_arrow = False
        break
    else:
        print('Введено невідому команду\n')

print('\nМатриця:')
for row in matrix:
    print(row)

turtle.setup(width=window_width, height=window_height)
turtle.setworldcoordinates(0, 0, window_width, window_height)

t = turtle.Turtle()
t.speed(0)
drawn_edges = set()

for row_index, row in enumerate(matrix):
    for column_index, value in enumerate(row):
        if value == 1:
            startPoint = vertices[row_index + 1]
            endPoint = vertices[column_index + 1]
            # Check if the edge has already been drawn in undirected graph
            if not has_arrow:
                if (row_index, column_index) in drawn_edges or (column_index, row_index) in drawn_edges:
                    continue
                drawn_edges.add((row_index, column_index))
            angle = angle_between_points(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'])
            if row_index == column_index:
                draw_self_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], has_arrow)
            elif angle == 90 or angle == -90 or angle == 0 or angle == 180:
                draw_broken_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], angle, has_arrow)
            else:
                draw_line(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], has_arrow)

for index, point in vertices.items():
    draw_circle(point['x'], point['y'])
    write_text_in_circle(point['x'], point['y'], str(index))

matrix_B = [[random.uniform(0, 1) for _ in range(10 + n[3])] for _ in range(10 + n[3])]
matrix_C = create_matrix_C(len(matrix), matrix_B, matrix)
matrix_D = create_matrix_D(len(matrix), matrix_C)
matrix_H = create_matrix_H(len(matrix), matrix_D)
matrix_Tr = create_matrix_Tr(len(matrix))
weighted_matrix = create_matrix_W(len(matrix), matrix_D, matrix_H, matrix_Tr, matrix_C)

print('\nМатриця ваг:')
for row in weighted_matrix:
    print(row)

mst = kruskal(weighted_matrix)
drawKraskal(mst)

mst_weight_sum = sum(edge[2] for edge in mst)
print(f'\nСума ваг ребер знайденого мінімального кістяка: {mst_weight_sum}')

turtle.mainloop()


keyboard.unhook_all()
