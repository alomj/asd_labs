import random
import math
import turtle
import keyboard

def getAdir(seed, variant):
    random.seed(seed)
    n = 10 + variant[3]

    matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(random.uniform(0, 2.0))
        matrix.append(row)
    k = 1.0 - variant[3] * 0.02 - variant[4] * 0.005 - 0.25

    for i in range(n):
        for j in range(n):
            matrix[i][j] *= k

    rounded_matrix = [[0 if element < 1.0 else 1 for element in row] for row in matrix]

    return rounded_matrix

def circle(x, y, color, thickness=1):
    t.penup()
    t.goto(x, y - radius)
    t.pendown()
    t.color(color)
    t.pensize(thickness)
    t.begin_fill()
    t.circle(radius)
    t.end_fill()

def circle_text(x, y, text):
    t.penup()
    t.goto(x, y - radius / 2)
    t.color('white')
    t.write(text, align="center", font=("Arial", 12, "normal"))

def draw_line(start_x, start_y, end_x, end_y, color, thickness=1, is_arrow=False):
    t.penup()
    t.goto(start_x, start_y)
    t.pendown()
    t.color(color)
    t.pensize(thickness)
    if is_arrow:
        arrow_length = 20
        t.setheading(t.towards(end_x, end_y))
        t.forward(t.distance(end_x, end_y) - arrow_length)
        t.stamp()
    t.goto(end_x, end_y)
    if is_arrow:
        t.setheading(0)

def draw_self_arrow(start_x, start_y, end_x, end_y, thickness=1, is_arrow=False):
    draw_line(start_x, start_y, start_x + self_arrow_padding, start_y + self_arrow_padding / 2, "black", thickness)
    draw_line(start_x + self_arrow_padding, start_y + self_arrow_padding / 2, start_x + self_arrow_padding, start_y - self_arrow_padding / 2, "black", thickness)
    draw_line(start_x + self_arrow_padding, start_y - self_arrow_padding / 2, end_x, end_y, "black", thickness, is_arrow)

def draw_broken_arrow(start_x, start_y, end_x, end_y, angle, color, thickness=1, is_arrow=False):
    distance_between_points = math.sqrt((end_x - start_x) ** 2 + (end_y - start_y) ** 2)
    change = (distance_between_points / (window_height / 4)) * radius

    if angle == 90:
        middle_x = start_x + change
        middle_y = (start_y + end_y) / 2
    elif angle == -90:
        middle_x = start_x - change
        middle_y = (start_y + end_y) / 2
    elif angle == 0:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y - change
    elif angle == 180:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y + change
    else:
        middle_x = (start_x + end_x) / 2
        middle_y = (start_y + end_y) / 2

    draw_line(start_x, start_y, middle_x, middle_y, color, thickness)
    draw_line(middle_x, middle_y, end_x, end_y, color, thickness, is_arrow)

def angle_between_points(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1
    angle_radians = math.atan2(dy, dx)
    angle_degrees = math.degrees(angle_radians)
    return angle_degrees

def dfs(matrix, vertices):
    def initialize_dfs(matrix):
        dfs_list = [-1 for _ in range(len(matrix))]  # Using -1 to indicate unvisited nodes
        dfs_matrix = [[0] * len(matrix) for _ in range(len(matrix))]
        stack_list = []
        return dfs_list, dfs_matrix, stack_list

    def process_vertex(vertex, dfs_list, stack_list, dfs_index, vertices):
        dfs_list[vertex] = dfs_index
        stack_list.append(vertex)
        keyboard.wait('space')
        mark_vertex(vertex, 'blue', vertices, 2)
        dfs_index += 1
        return dfs_index

    def draw_edge(i, j, row, element, vertices):
        angle = angle_between_points(row['x'], row['y'], element['x'], element['y'])
        if angle in [90, -90, 0, 180]:
            draw_broken_arrow(row['x'], row['y'], element['x'], element['y'], angle, 'blue', 2, True)
        else:
            draw_line(row['x'], row['y'], element['x'], element['y'], 'blue', 2, True)
        mark_vertex(j, 'blue', vertices, 2)

    def mark_vertex(index, color, vertices, thickness):
        x, y = vertices[index + 1]['x'], vertices[index + 1]['y']
        circle(x, y, color, thickness)
        circle_text(x, y, str(index + 1))

    t.color("blue")
    dfs_list, dfs_matrix, stack_list = initialize_dfs(matrix)

    start = 0
    dfs_index = 1 

    while any(element == -1 for element in dfs_list):
        if dfs_list[start] == -1:
            dfs_index = process_vertex(start, dfs_list, stack_list, dfs_index, vertices)

        while stack_list:
            i = stack_list[-1]
            row = vertices[i + 1]

            for j in range(len(matrix[i])):
                element = vertices[j + 1]
                if matrix[i][j] and dfs_list[j] == -1:
                    dfs_index = process_vertex(j, dfs_list, stack_list, dfs_index, vertices)
                    draw_edge(i, j, row, element, vertices)
                    dfs_matrix[i][j] = 1
                    break
            else:
                stack_list.pop(-1)
                keyboard.wait('space')
                mark_vertex(i, 'blue', vertices, 2)

        if any(element == -1 for element in dfs_list):
            start = dfs_list.index(-1)

    t.color('black')
    return dfs_list, dfs_matrix

n = {
    1: 3,
    2: 3,
    3: 0,
    4: 8,
}

window_width = 600
window_height = 600
self_arrow_padding = 60
margin = 100
radius = 20
line_thickness = 1
vertices = {
    1: {'x': margin, 'y': window_height - margin},
    2: {'x': (window_width - 2 * margin) / 3 + margin, 'y': window_height - margin},
    3: {'x': (window_width - 2 * margin) / 3 * 2 + margin, 'y': window_height - margin},
    4: {'x': window_width - margin, 'y': window_height - margin},
    5: {'x': window_width - margin, 'y': (window_height - 3 * margin) / 2 + margin},
    6: {'x': window_width - margin, 'y': margin},
    7: {'x': (window_width - 2 * margin) / 2 + margin, 'y': margin},
    8: {'x': margin, 'y': margin},
    9: {'x': margin, 'y': (window_height - 2 * margin) / 2 + margin},
    10: {'x': window_width / 2, 'y': window_height / 2},
}

Adir = getAdir(3308, n)

matrix = Adir
has_arrow = True

print('\nМатриця:')
for row in matrix:
    print(row)

turtle.setup(width=window_width, height=window_height)
turtle.setworldcoordinates(0, 0, window_width, window_height)

t = turtle.Turtle()
t.speed(0)
for row_index, row in enumerate(matrix):
    for column_index, value in enumerate(row):
        startPoint = vertices[row_index + 1]
        endPoint = vertices[column_index + 1]

        if value == 1:
            angle = angle_between_points(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'])

            if row_index == column_index:
                draw_self_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], line_thickness, has_arrow)
            elif angle == 90 or angle == -90 or angle == 0 or angle == 180:
                draw_broken_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], angle, "black", line_thickness, has_arrow)
            else:
                draw_line(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], "black", line_thickness, has_arrow)

for index, point in vertices.items():
    circle(point['x'], point['y'], 'black', line_thickness)
    circle_text(point['x'], point['y'], str(index))

dfs_order, dfs_matrix = dfs(matrix, vertices)
print(f"\nDFS order: {dfs_order}")
print(f"\nDFS matrix:")
for row in dfs_matrix:
    print(row)

t.mainloop()

