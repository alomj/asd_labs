import random
import math
import turtle
import numpy as np
import time

def getAdir(seed, variant):
    random.seed(seed)
    n = 10 + variant[3]

    matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(random.uniform(0, 2.0))
        matrix.append(row)
    k1 = 1.0 - variant[3] * 0.01 - variant[4] * 0.01 - 0.3
    for i in range(n):
        for j in range(n):
            matrix[i][j] *= k1

    rounded_matrix = [[0 if element < 1.0 else 1 for element in row] for row in matrix]

    return rounded_matrix

def getAdirUpdated(seed, variant):
    random.seed(seed)
    n = 10 + variant[3]

    matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(random.uniform(0, 2.0))
        matrix.append(row)
    k2 = 1.0 - variant[3] * 0.005 - variant[4] * 0.005 - 0.27
    for i in range(n):
        for j in range(n):
            matrix[i][j] *= k2
    rounded_matrix = [[0 if element < 1.0 else 1 for element in row] for row in matrix] 
    return rounded_matrix

def toUndir(matrix, N):
    undir = []
    for i in range(N):
        undir.append([])
        for j in range(N):
            undir[i].append(0)
    for i in range(N):
        for j in range(N):
            undir[i][j] = matrix[i][j] or matrix[j][i]
    return undir

def calculateDegreesForDir(matrix):
    out_degrees = [0] * len(matrix)
    in_degrees = [0] * len(matrix)
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] > 0:
                out_degrees[i] += 1
                in_degrees[j] += 1
    return out_degrees, in_degrees

def calculateDegreesForUndir(matrix):
    degrees = [0] * len(matrix)
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] > 0:
                degrees[i] += 1
    return degrees

def is_graph_regular(matrix):
    degrees = [sum(row) for row in matrix]
    if all(degree == degrees[0] for degree in degrees):
        return True, degrees[0]
    else:
        return False, None

def find_pendant_and_isolated_vertices(matrix):
    pendant_vertices = []
    isolated_vertices = []
    for i in range(len(matrix)):
        connections = sum(1 for j in range(len(matrix[i])) if matrix[i][j] > 0)
        if connections == 1:
            pendant_vertices.append(i)
        elif connections == 0:
            isolated_vertices.append(i)
    return pendant_vertices, isolated_vertices

def find_paths(matrix):
    size = len(matrix)
    paths_2 = [[[] for _ in range(size)] for _ in range(size)]
    paths_3 = [[[] for _ in range(size)] for _ in range(size)]
    for i in range(size):
        for j in range(size):
            for k1 in range(size):
                if matrix[i][k1] > 0 and matrix[k1][j] > 0:
                    paths_2[i][j].append([i, k1, j])
    for i in range(size):
        for j in range(size):
            for path in paths_2[i][j]:
                for k1 in range(size):
                    if matrix[j][k1] > 0:
                        paths_3[i][k1].append(path + [k1])
    return paths_2, paths_3

def reachConnectMatrix(matrix):
    n = len(matrix)
    I_matrix = [[1 if i == j else 0 for j in range(n)] for i in range(n)]
    square_m = np.linalg.matrix_power(matrix, 2)
    cubic_m = np.linalg.matrix_power(matrix, 3)
    tetra_m = np.linalg.matrix_power(matrix, 4)
    sum_res = sumMatrix(sumMatrix(sumMatrix(sumMatrix(I_matrix, matrix), square_m), cubic_m), tetra_m)
    reach_matrix = [[1 if sum_res[i][j] != 0 else 0 for j in range(n)] for i in range(n)]
    transposed = transposeMatrix(reach_matrix)
    con_matrix = elementProduct(reach_matrix, transposed)
    return reach_matrix, con_matrix

def sumMatrix(matrix1, matrix2):
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def transposeMatrix(matr):
    return [[matr[j][i] for j in range(len(matr))] for i in range(len(matr))]

def elementProduct(matrix1, matrix2):
    return [[matrix1[i][j] * matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def closure(matrix):
    n = len(matrix)
    closure = [[matrix[i][j] for j in range(n)] for i in range(n)]
    for k in range(n):
        for i in range(n):
            for j in range(n):
                closure[i][j] |= closure[i][k] and closure[k][j]
    return closure

def findComponents(con_matrix):
    unique_components = set(tuple(row) for row in con_matrix)
    con_components = []
    for component in unique_components:
        indices = [i + 1 for i, row in enumerate(con_matrix) if tuple(row) == component]
        con_components.append(indices)
    return con_components

def strongComponents(matrix):
    def dfs(vertex):
        nonlocal component
        visited[vertex] = True
        component.append(vertex)
        for neighbor in range(1, len(matrix)+1):
            if matrix[vertex-1][neighbor-1] == 1 and not visited[neighbor]:
                dfs(neighbor)
    visited = [False] * (len(matrix)+1)
    components = []
    for vertex in range(1, len(matrix) + 1):
        if not visited[vertex]:
            component = []
            dfs(vertex)
            components.append(component)
    return components

def condensation_matrix(matrix, components):
    num_vertices = len(components)
    condensation_matrix = [[0] * num_vertices for _ in range(num_vertices)]
    vertex_index = {}
    for index, component in enumerate(components):
        for vertex in component:
            vertex_index[vertex] = index

    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j]:
                index_com_i = vertex_index[i + 1]
                index_com_j = vertex_index[j + 1]
                if index_com_i != index_com_j:
                    condensation_matrix[index_com_i][index_com_j] = 1

    return condensation_matrix




def draw_circle(x, y):
    t.pencolor('#f0f0f0')
    t.penup()
    t.goto(x, y-radius)
    t.pendown()
    t.fillcolor('#f0f0f0')
    t.begin_fill()
    t.circle(radius)
    t.end_fill()

def write_text_in_circle(x, y, text):
    t.penup()
    t.goto(x, y-radius/2)
    t.pendown()
    t.color('black')
    t.write(text, align="center", font=("Arial", 12, "normal"))

def draw_line(start_x, start_y, end_x, end_y, is_arrow = False):
    t.penup()
    t.goto(start_x, start_y)
    t.pendown()
    if is_arrow: 
        arrow_length = 20
        t.setheading(t.towards(end_x, end_y))
        t.forward(t.distance(end_x, end_y) - arrow_length)
        t.stamp()
    t.goto(end_x, end_y)
    if is_arrow:
        t.setheading(0)

def draw_self_arrow(start_x, start_y, end_x, end_y, is_arrow = False):
    draw_line(start_x, start_y, start_x + self_arrow_padding, start_y + self_arrow_padding/2)
    draw_line(start_x + self_arrow_padding, start_y + self_arrow_padding/2, start_x + self_arrow_padding, start_y - self_arrow_padding/2)
    draw_line(start_x + self_arrow_padding, start_y - self_arrow_padding/2, end_x, end_y, is_arrow)

def draw_broken_arrow(start_x, start_y, end_x, end_y, angle, is_arrow = False):
    distance_between_points = math.sqrt((end_x - start_x)**2 + (end_y - start_y)**2)
    change = (distance_between_points / (window_height/4)) * radius
    if angle == 90:
        middle_x = start_x + change
        middle_y = (start_y + end_y) / 2 
    elif angle == -90:
        middle_x = start_x - change
        middle_y = (start_y + end_y) / 2
    elif angle == 0:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y - change
    elif angle == 180:
        middle_x = (start_x + end_x) / 2
        middle_y = start_y + change
    draw_line(start_x, start_y, middle_x, middle_y)
    draw_line(middle_x, middle_y, end_x, end_y, is_arrow)

def angle_between_points(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1
    angle_radians = math.atan2(dy, dx)
    angle_degrees = math.degrees(angle_radians)
    return angle_degrees

n = {
    1: 3,
    2: 3,
    3: 0,
    4: 8,
}

window_width = 600
window_height = 600
margin = 100
self_arrow_padding = 60
radius = 20
vertices = {
    1: { 'x': margin, 'y': window_height - margin },
    2: { 'x': (window_width - 2*margin) / 3 + margin, 'y': window_height - margin },
    3: { 'x': (window_width - 2*margin) / 3*2 + margin, 'y': window_height - margin },
    4: { 'x': window_width - margin, 'y': window_height - margin },
    5: { 'x': window_width - margin, 'y': (window_height - 2*margin) / 2 + margin},
    6: { 'x': window_width - margin, 'y': margin },
    7: { 'x': (window_width - 2*margin) / 2 + margin, 'y': margin },
    8: { 'x': margin, 'y': margin },
    9: { 'x': margin, 'y': (window_height - 2*margin) / 2 + margin },
    10: { 'x': window_width/ 2, 'y': window_height / 2 },
}

Adir = getAdir(3308, n)
Adir2 = getAdirUpdated(3308, n)
Undir = toUndir(Adir, 10 + n[3])

has_arrow = False

while True: 
    print('Введіть: 1 щоб вивести напрямлений, 0 щоб вивести ненапрямлений, або 2 щоб вивести модифікований напрямлений граф')
    choice = input()
    if choice == '1':
        current_matrix = Adir
        has_arrow = True
        break
    elif choice == '0':
        current_matrix = Undir
        has_arrow == False
        break
    elif choice == '2':
        current_matrix = Adir2
        has_arrow = True
        break
    else:
        print('Введено невідому команду\n')

print('\nМатриця:')
for row in current_matrix:
    print(row)


if has_arrow:
    out_degrees, in_degrees = calculateDegreesForDir(current_matrix)
    print("Напівстепені виходу напрямленого графа:", out_degrees)
    print("Напівстепені заходу напрямленого графа:", in_degrees)
else:
    degrees_for_undir = calculateDegreesForUndir(current_matrix)
    print("Степені вершин ненапрямленого графа:", degrees_for_undir)

is_regular, degree = is_graph_regular(current_matrix)
if is_regular:
    print(f"Граф однорідний зі ступенем однорідності r: {degree}")
else:
    print("Граф не однорідний.")

pendant_vertices, isolated_vertices = find_pendant_and_isolated_vertices(current_matrix)
print("Висячі вершини:", pendant_vertices)
print("Ізольовані вершини:", isolated_vertices)

paths_2, paths_3 = find_paths(current_matrix)
print("Шляхи довжиною 2:")
for i in range(len(paths_2)):
    for j in range(len(paths_2[i])):
        if paths_2[i][j]:
            print(f"Шляхи від {i + 1} до {j + 1}: {paths_2[i][j]}")

print("\nШляхи довжиною 3:")
for i in range(len(paths_3)):
    for j in range(len(paths_3[i])):
        if paths_3[i][j]:
            print(f"Шляхи від {i + 1} до {j + 1}: {paths_3[i][j]}")
if current_matrix == Adir2:

    paths_2, paths_3 = find_paths(current_matrix)
    print("Шляхи довжиною 2:")
    for i in range(len(paths_2)):
        for j in range(len(paths_2[i])):
            if paths_2[i][j]:
                print(f"Шляхи від {i + 1} до {j + 1}: {paths_2[i][j]}")

    print("\nШляхи довжиною 3:")
    for i in range(len(paths_3)):
        for j in range(len(paths_3[i])):
            if paths_3[i][j]:
                print(f"Шляхи від {i + 1} до {j + 1}: {paths_3[i][j]}")

    reach_matrix, con_matrix = reachConnectMatrix(current_matrix)
    print("Матриця досяжності:")
    for row in reach_matrix:
        print(row)
        
    components = findComponents(con_matrix)
    print("Компоненти зв'язності:")
    for component in components:
        print(component)
    
    strongMatrix = closure(con_matrix)
    print("Матриця сильної зв'язності:")
    for row in strongMatrix:
        print(row)    

    components = strongComponents(strongMatrix)

    print("Компоненти сильної зв'язності:")
    for i, component in enumerate(components):
        print(f"Компонент {i + 1}: {component}")
    
    condensation_adjacency_matrix = condensation_matrix(Adir2, components)
    print("Матриця графа конденсації:")
    for row in condensation_adjacency_matrix:
        print(row)



turtle.setup(width=window_width, height=window_height)
turtle.setworldcoordinates(0, 0, window_width, window_height)

t = turtle.Turtle()
t.speed(0)
drawn_edges = set()

for row_index, row in enumerate(current_matrix):
    for column_index, value in enumerate(row):
        if value == 1: 
            startPoint = vertices[row_index + 1]
            endPoint = vertices[column_index + 1]

            if not has_arrow:
                if (row_index, column_index) in drawn_edges or (column_index, row_index) in drawn_edges:
                    continue
                drawn_edges.add((row_index, column_index))
            
            angle = angle_between_points(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'])

            if row_index == column_index:
                draw_self_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], has_arrow)
            elif angle == 90 or angle == -90 or angle == 0 or angle == 180:
                draw_broken_arrow(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], angle, has_arrow)
            else: 
                draw_line(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y'], has_arrow)

for index, point in vertices.items():
    draw_circle(point['x'], point['y'])
    write_text_in_circle(point['x'], point['y'], str(index))

if current_matrix == Adir2:
    time.sleep(7)

    turtle.clearscreen()

    center_x = window_width / 2
    center_y = window_height / 2
    draw_circle(center_x, center_y)
    write_text_in_circle(center_x, center_y, 1)    
    turtle.mainloop()

turtle.mainloop()
